# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Define commands
commands:
  print_pipeline_id:
    description: "Command to prints the Circle CI Workflow ID"
    steps:
      - run: echo $CIRCLE_WORKFLOW_ID
# Define anchors/aliases
defaults: &defaults
  docker:
    - image: circleci/node:13.8.0
# Use a package of configuration called an orb.
#orbs:
  # Declare a dependency on the welcome-orb
  #welcome: circleci/welcome-orb@0.4.1
# Define Jobs
jobs:
  use-command-job:
    <<: *defaults # use alias
    steps:
      - print_pipeline_id

  # save_hello_world_output:
  #   docker:
  #     - image: cimg/base:2020.01
  #   steps:
  #     - run: echo "hello world output" > /tmp/output.txt
  #     - persist_to_workspace:
  #         root: /tmp
  #         paths:
  #           - output.txt
  # print_output_file:
  #   docker:
  #     - image: cimg/base:2020.01
  #   steps:
  #     - attach_workspace:
  #         at: /tmp
  #     - run: cat /tmp/output.txt
  # print_hello:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run: echo "hello"
  # print_world:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run: echo "world"
  # print_owner:
  #   docker:
  #     - image: cimg/base:2020.01
  #   steps:
  #     - run:
  #         name: "echo an env var that is part of our project"
  #         command: |
  #           echo $owner
# Orchestrate or schedule a set of jobs
workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      - use-command-job
      #- welcome/run
      # - save_hello_world_output
      # - print_output_file:
      #     requires:
      #       - save_hello_world_output    
      # - print_hello
      # - print_world:
      #     requires:
      #       - print_hello
      #- print_owner
